{"version":3,"sources":["../src/NumberInput.js"],"names":["buttonStyle","borderRadius","lineHeight","margin","inputStyle","textAlign","NumberInput","props","minValue","onChange","stepCount","value","valueAsInteger","parseInt","Number","isSafeInteger","newValueAsInteger","toString","maxValue","newValue","target","className","id","maxLength","size","valueIsNotANumber","isNaN","decrementValue","changeValue","incrementValue","length","React","Component","PropTypes","string","Error","func","isRequired","oneOf","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER"],"mappings":";;;;;;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,YAAY,EAAE,CADI;AAElBC,EAAAA,UAAU,EAAE,iBAFM;AAGlBC,EAAAA,MAAM,EAAE;AAHU,CAApB;AAMA,IAAMC,UAAU,GAAG;AACjBH,EAAAA,YAAY,EAAE,CADG;AAEjBI,EAAAA,SAAS,EAAE;AAFM,CAAnB,C,CAKA;;IACqBC,W;;;;;;;;;;;;;;;;;;qEA0DF,YAAM;AAAA,wBAC4B,MAAKC,KADjC;AAAA,UACbC,QADa,eACbA,QADa;AAAA,UACHC,QADG,eACHA,QADG;AAAA,UACOC,SADP,eACOA,SADP;AAAA,UACkBC,KADlB,eACkBA,KADlB;AAErB,UAAMC,cAAc,GAAGC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAA/B;;AAEA,UAAIG,MAAM,CAACC,aAAP,CAAqBH,cAArB,CAAJ,EAA0C;AACxC,YAAMI,iBAAiB,GAAGJ,cAAc,GAAGF,SAA3C;;AACA,YAAIM,iBAAiB,IAAIR,QAAzB,EAAmC;AACjCC,UAAAA,QAAQ,CAACO,iBAAiB,CAACC,QAAlB,EAAD,CAAR;AACD;AACF;AACF,K;;qEAEgB,YAAM;AAAA,yBAC4B,MAAKV,KADjC;AAAA,UACbW,QADa,gBACbA,QADa;AAAA,UACHT,QADG,gBACHA,QADG;AAAA,UACOC,SADP,gBACOA,SADP;AAAA,UACkBC,KADlB,gBACkBA,KADlB;AAErB,UAAMC,cAAc,GAAGC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAA/B;;AAEA,UAAIG,MAAM,CAACC,aAAP,CAAqBH,cAArB,CAAJ,EAA0C;AACxC,YAAMI,iBAAiB,GAAGJ,cAAc,GAAGF,SAA3C;;AACA,YAAIM,iBAAiB,IAAIE,QAAzB,EAAmC;AACjCT,UAAAA,QAAQ,CAACO,iBAAiB,CAACC,QAAlB,EAAD,CAAR;AACD;AACF;AACF,K;;kEAEa,gBAA4E;AAAA,UAAxDE,QAAwD,QAAzEC,MAAyE,CAA/DT,KAA+D;AAAA,yBAC/C,MAAKJ,KAD0C;AAAA,UAChFW,QADgF,gBAChFA,QADgF;AAAA,UACtEV,QADsE,gBACtEA,QADsE;AAAA,UAC5DC,QAD4D,gBAC5DA,QAD4D;AAExF,UAAMO,iBAAiB,GAAGH,QAAQ,CAACM,QAAD,EAAW,EAAX,CAAlC;;AAEA,UAAIL,MAAM,CAACC,aAAP,CAAqBC,iBAArB,CAAJ,EAA6C;AAC3C,YAAIA,iBAAiB,IAAIR,QAArB,IAAiCQ,iBAAiB,IAAIE,QAA1D,EAAoE;AAClET,UAAAA,QAAQ,CAACO,iBAAiB,CAACC,QAAlB,EAAD,CAAR;AACD;AACF;AACF,K;;;;;;;6BAEoB;AAAA,yBAC8D,KAAKV,KADnE;AAAA,UACXc,SADW,gBACXA,SADW;AAAA,UACAC,EADA,gBACAA,EADA;AAAA,UACIC,SADJ,gBACIA,SADJ;AAAA,UACeL,QADf,gBACeA,QADf;AAAA,UACyBV,QADzB,gBACyBA,QADzB;AAAA,UACmCgB,IADnC,gBACmCA,IADnC;AAAA,UACyCd,SADzC,gBACyCA,SADzC;AAAA,UACoDC,KADpD,gBACoDA,KADpD;AAEnB,UAAMC,cAAc,GAAGC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAA/B;AACA,UAAMc,iBAAiB,GAAGX,MAAM,CAACY,KAAP,CAAad,cAAb,CAA1B;AAEA,aACE;AAAK,QAAA,EAAE,EAAEU,EAAT;AAAa,QAAA,SAAS,EAAED;AAAxB,SACE,gCAAC,uBAAD;AACE,QAAA,IAAI,EAAEG,IADR;AAEE,QAAA,KAAK,EAAExB,WAFT;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,OAAO,EAAE,KAAK2B,cAJhB;AAKE,QAAA,QAAQ,EAAEF,iBAAiB,IAAIb,cAAc,GAAGF,SAAjB,IAA8BF;AAL/D,QADF,EAQE;AAAK,QAAA,SAAS,qBAAcgB,IAAd;AAAd,SACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAEpB,UAFT;AAGE,QAAA,SAAS,EAAEmB,SAHb;AAIE,QAAA,KAAK,EAAEZ,KAJT;AAKE,QAAA,QAAQ,EAAE,KAAKiB;AALjB,QADF,CARF,EAiBE,gCAAC,uBAAD;AACE,QAAA,IAAI,EAAEJ,IADR;AAEE,QAAA,KAAK,EAAExB,WAFT;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,OAAO,EAAE,KAAK6B,cAJhB;AAKE,QAAA,QAAQ,EACNJ,iBAAiB,IACjBb,cAAc,GAAGF,SAAjB,IAA8BQ,QAD9B,IAEA,CAACN,cAAc,GAAGF,SAAlB,EAA6BO,QAA7B,GAAwCa,MAAxC,GAAiDP;AARrD,QAjBF,CADF;AA+BD;;;;EAjIsCQ,kBAAMC,S;;;;gBAA1B1B,W,eACA;AACjBgB,EAAAA,EAAE,EAAEW,sBAAUC,MADG;AAEjB;AACAvB,EAAAA,KAHiB,iBAGXJ,KAHW,EAGW;AAC1B,QAAI,CAACA,KAAK,CAACI,KAAX,EAAkB;AAChB,aAAO,IAAIwB,KAAJ,CAAU,mBAAV,CAAP;AACD;;AACD,QAAI,CAACrB,MAAM,CAACC,aAAP,CAAqBF,QAAQ,CAACN,KAAK,CAACI,KAAP,EAAc,EAAd,CAA7B,CAAL,EAAsD;AACpD,aAAO,IAAIwB,KAAJ,CAAU,yDAAV,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GAXgB;AAYjB1B,EAAAA,QAAQ,EAAEwB,sBAAUG,IAAV,CAAeC,UAZR;AAajBhB,EAAAA,SAAS,EAAEY,sBAAUC,MAbJ;AAcjB1B,EAAAA,QAdiB,oBAcRD,KAdQ,EAcc;AAC7B,QAAI,CAACO,MAAM,CAACC,aAAP,CAAqBR,KAAK,CAACC,QAA3B,CAAL,EAA2C;AACzC,aAAO,IAAI2B,KAAJ,CAAU,6BAAV,CAAP;AACD;;AACD,QAAI5B,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACW,QAA5B,EAAsC;AACpC,aAAO,IAAIiB,KAAJ,CAAU,qCAAV,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GAtBgB;AAuBjBjB,EAAAA,QAvBiB,oBAuBRX,KAvBQ,EAuBc;AAC7B,QAAI,CAACO,MAAM,CAACC,aAAP,CAAqBR,KAAK,CAACW,QAA3B,CAAL,EAA2C;AACzC,aAAO,IAAIiB,KAAJ,CAAU,6BAAV,CAAP;AACD;;AACD,QAAI5B,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACW,QAA5B,EAAsC;AACpC,aAAO,IAAIiB,KAAJ,CAAU,qCAAV,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GA/BgB;AAgCjBZ,EAAAA,SAhCiB,qBAgCPhB,KAhCO,EAgCe;AAC9B,QAAI,CAACO,MAAM,CAACC,aAAP,CAAqBR,KAAK,CAACgB,SAA3B,CAAD,IAA0ChB,KAAK,CAACgB,SAAN,GAAkB,CAAhE,EAAmE;AACjE,aAAO,IAAIY,KAAJ,CAAU,sCAAV,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GArCgB;AAsCjBX,EAAAA,IAAI,EAAES,sBAAUK,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B,EAAkC,MAAlC,EAA0C,SAA1C,CAAhB,CAtCW;AAuCjB5B,EAAAA,SAvCiB,qBAuCPH,KAvCO,EAuCe;AAC9B,QAAI,CAACO,MAAM,CAACC,aAAP,CAAqBR,KAAK,CAACG,SAA3B,CAAD,IAA0CH,KAAK,CAACG,SAAN,GAAkB,CAAhE,EAAmE;AACjE,aAAO,IAAIyB,KAAJ,CAAU,sCAAV,CAAP;AACD;;AACD,WAAO,IAAP;AACD;AA5CgB,C;;gBADA7B,W,kBAgDG;AACpBgB,EAAAA,EAAE,EAAE,IADgB;AAEpBD,EAAAA,SAAS,EAAE,IAFS;AAGpBb,EAAAA,QAAQ,EAAEM,MAAM,CAACyB,gBAHG;AAIpBrB,EAAAA,QAAQ,EAAEJ,MAAM,CAAC0B,gBAJG;AAKpBjB,EAAAA,SAAS,EAAE,EALS;AAMpBC,EAAAA,IAAI,EAAE,OANc;AAOpBd,EAAAA,SAAS,EAAE;AAPS,C","sourcesContent":["// @flow\n\nimport React from 'react';\nimport type { Element } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\n\ntype Props = {\n  id: string,\n  value: string,\n  onChange: (newValue: string) => void,\n  className: string,\n  minValue: number,\n  maxValue: number,\n  maxLength: number,\n  size: 'mini' | 'small' | 'large' | 'big' | 'huge' | 'massive',\n  stepCount: number\n};\n\nconst buttonStyle = {\n  borderRadius: 0,\n  lineHeight: 'calc(1em + 2px)',\n  margin: 0\n};\n\nconst inputStyle = {\n  borderRadius: 0,\n  textAlign: 'right'\n};\n\n// noinspection JSUnusedGlobalSymbols\nexport default class NumberInput extends React.Component<Props, {}> {\n  static propTypes = {\n    id: PropTypes.string,\n    // eslint-disable-next-line react/require-default-props\n    value(props: Props): ?Error {\n      if (!props.value) {\n        return new Error('value is required');\n      }\n      if (!Number.isSafeInteger(parseInt(props.value, 10))) {\n        return new Error('value must be a string that can be parsed to an integer');\n      }\n      return null;\n    },\n    onChange: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    minValue(props: Props): ?Error {\n      if (!Number.isSafeInteger(props.minValue)) {\n        return new Error('minValue must be an integer');\n      }\n      if (props.minValue >= props.maxValue) {\n        return new Error('maxValue must greater than minValue');\n      }\n      return null;\n    },\n    maxValue(props: Props): ?Error {\n      if (!Number.isSafeInteger(props.maxValue)) {\n        return new Error('maxValue must be an integer');\n      }\n      if (props.minValue >= props.maxValue) {\n        return new Error('maxValue must greater than minValue');\n      }\n      return null;\n    },\n    maxLength(props: Props): ?Error {\n      if (!Number.isSafeInteger(props.maxLength) || props.maxLength < 1) {\n        return new Error('maxLength must be a positive integer');\n      }\n      return null;\n    },\n    size: PropTypes.oneOf(['mini', 'small', 'large', 'big', 'huge', 'massive']),\n    stepCount(props: Props): ?Error {\n      if (!Number.isSafeInteger(props.stepCount) || props.stepCount < 1) {\n        return new Error('stepCount must be a positive integer');\n      }\n      return null;\n    }\n  };\n\n  static defaultProps = {\n    id: null,\n    className: null,\n    minValue: Number.MIN_SAFE_INTEGER,\n    maxValue: Number.MAX_SAFE_INTEGER,\n    maxLength: 10,\n    size: 'small',\n    stepCount: 1\n  };\n\n  decrementValue = () => {\n    const { minValue, onChange, stepCount, value } = this.props;\n    const valueAsInteger = parseInt(value, 10);\n\n    if (Number.isSafeInteger(valueAsInteger)) {\n      const newValueAsInteger = valueAsInteger - stepCount;\n      if (newValueAsInteger >= minValue) {\n        onChange(newValueAsInteger.toString());\n      }\n    }\n  };\n\n  incrementValue = () => {\n    const { maxValue, onChange, stepCount, value } = this.props;\n    const valueAsInteger = parseInt(value, 10);\n\n    if (Number.isSafeInteger(valueAsInteger)) {\n      const newValueAsInteger = valueAsInteger + stepCount;\n      if (newValueAsInteger <= maxValue) {\n        onChange(newValueAsInteger.toString());\n      }\n    }\n  };\n\n  changeValue = ({ target: { value: newValue } }: SyntheticInputEvent<HTMLInputElement>) => {\n    const { maxValue, minValue, onChange } = this.props;\n    const newValueAsInteger = parseInt(newValue, 10);\n\n    if (Number.isSafeInteger(newValueAsInteger)) {\n      if (newValueAsInteger >= minValue && newValueAsInteger <= maxValue) {\n        onChange(newValueAsInteger.toString());\n      }\n    }\n  };\n\n  render(): Element<*> {\n    const { className, id, maxLength, maxValue, minValue, size, stepCount, value } = this.props;\n    const valueAsInteger = parseInt(value, 10);\n    const valueIsNotANumber = Number.isNaN(valueAsInteger);\n\n    return (\n      <div id={id} className={className}>\n        <Button\n          size={size}\n          style={buttonStyle}\n          icon=\"minus\"\n          onClick={this.decrementValue}\n          disabled={valueIsNotANumber || valueAsInteger - stepCount <= minValue}\n        />\n        <div className={`ui input ${size}`}>\n          <input\n            type=\"text\"\n            style={inputStyle}\n            maxLength={maxLength}\n            value={value}\n            onChange={this.changeValue}\n          />\n        </div>\n        <Button\n          size={size}\n          style={buttonStyle}\n          icon=\"plus\"\n          onClick={this.incrementValue}\n          disabled={\n            valueIsNotANumber ||\n            valueAsInteger + stepCount >= maxValue ||\n            (valueAsInteger + stepCount).toString().length > maxLength\n          }\n        />\n      </div>\n    );\n  }\n}\n"],"file":"NumberInput.js"}